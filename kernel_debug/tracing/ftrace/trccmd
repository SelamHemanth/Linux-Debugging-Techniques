#!/bin/bash
# trccmd
#
# A simple wrapper over the useful trace-cmd front-end to ftrace.
# It uses the function_graph plugin.. records the session, generates the
# binary <cmd>_trc.dat file as well as a human-readable 'report' file,
# typically under /tmp/trc.txt.
# 
# As an additional feature, the binary data file generated by trace-cmd(1),
# can be imported into the Trace Compass GUI and better visualized.
# Details here: using_tracecompass_gui_with_trccmd.txt
# (online: https://github.com/kaiwan/L5_debug_trg/blob/master/kernel_debug/tracing/ftrace/using_tracecompass_gui_with_trccmd.txt)
#
# (c) Kaiwan N Billimoria, kaiwanTECH
# License: MIT
name=$(basename "$0")

#--- Configs
TRC_FILE=/tmp/trc.txt
DONT_REPORT_IRQCTX=1  # filter out all interrupt context funcs from the final report

usage()
{
   echo "Usage: ${name} [program-to-ftrace-via-trace-cmd]
 Eg. sudo ./${name} ps -LA
 NOTE: this will perform an _exclusive_ ftrace of the provided app (ps in the above eg).
If no program is provided as an argument, we shall trace-cmd(1) whatever's running."
}


## "main" here

if [ $# -ge 1 ] ; then
 if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
   usage
   exit 0
 fi
fi

[ "$(id -u)" -ne 0 ] && {
 echo "${name}: Need to be root."
 exit 1
}
# TODO - update to check for tracefs fs
echo -n "[+] Checking for ftrace support ..."
mount |grep -q -w debugfs || {
 echo "${name}: debugfs filesystem not mounted? Aborting..."
 exit 2
}
TRCMNT=$(mount |grep -w debugfs |awk '{print $3}')
export TRCMNT=${TRCMNT}/tracing
[ ! -d "${TRCMNT}" ] && {
 echo "${name}: ${TRCMNT} not mounted as debugfs? Aborting..."
 exit 2
}
echo " [OK] (ftrace loc: ${TRCMNT})"

echo -n "[+] Checking for trace-cmd with function_graph plugin support ..."
which trace-cmd >/dev/null 2>&1 || {
  echo "${name}: trace-cmd not installed (or not in PATH)?"
  exit 1
}
# test for the 'function_graph' plugin support
trace-cmd record -p function_graph -l kmem_cache_alloc -F ls / >/dev/null 2>&1 || {
  echo "${name}: trace-cmd didn't work with the function-graph plugin, aborting..."
  exit 2
}
rm -f trace.dat 2>/dev/null
echo " [OK]"

TRC_FILE_BINARY=trc.dat
[ $# -ge 1 ] && TRC_FILE_BINARY=$(basename "$1")_trc.dat
#echo "TRC_FILE_BINARY = ${TRC_FILE_BINARY}"
echo "[+] Recording now ...(binary ftrace file is ${TRC_FILE_BINARY})"
if [ $# -ge 1 ] ; then
  trace-cmd record -p function_graph -o "${TRC_FILE_BINARY}" -c -F "$@"
   # -F: trace only this executable
   # -c: ...along with it's children, if any
else
  trace-cmd record -p function_graph -o "${TRC_FILE_BINARY}"
fi
[ $? -ne 0 ] && {
  echo "${name}: 'trace-cmd record' failed, aborting ..."
  exit 4
}
ls "${TRC_FILE_BINARY}" >/dev/null || {
  echo "${name}: 'trace-cmd record' failed, no binary trace file, aborting ..."
  exit 5
}

echo "[+] Generating the trace-cmd report now ..."
echo -n "    Note: report done in latency format"
if [ ${DONT_REPORT_IRQCTX} -eq 1 ] ; then
  echo ", *leaving out* interrupt contexts"
  trace-cmd report -i "${TRC_FILE_BINARY}" -I -S -l > ${TRC_FILE}
else
  trace-cmd report -i "${TRC_FILE_BINARY}" -l > ${TRC_FILE}
fi
[ $? -ne 0 ] && {
    echo "${name}: 'trace-cmd report' failed, aborting ..."
    exit 6
}
echo "[+] Done, report: ${TRC_FILE}"
ls -lh ${TRC_FILE}

echo "
NOTE:
The binary data file generated by trace-cmd, here [${TRC_FILE_BINARY}]:
    $(ls -lh "${TRC_FILE_BINARY}")
can be imported into the Trace Compass GUI and better visualized.
Details here: using_tracecompass_gui_with_trccmd.txt
(online: https://github.com/kaiwan/L5_debug_trg/blob/master/kernel_debug/tracing/ftrace/using_tracecompass_gui_with_trccmd.txt)
"
exit 0
