#!/bin/bash
# trccmd
# A simple wrapper over the useful trace-cmd front-end to ftrace
#
# Kaiwan NB, kaiwanTECH
name=$(basename $0)

#--- Configs
TRC_FILE=/tmp/trc.txt
WANT_RAW_FMT=1   # set to 1 to get the 'Trace Compass' format report file; YMMV :-p
TRC_FILE_RAW=/tmp/trc_raw.txt  # for Trace Compass
DONT_REPORT_IRQCTX=1  # filter out all interrupt context funcs from the final report

## "main" here
[ $(id -u) -ne 0 ] && {
 echo "${name}: Need to be root."
 exit 1
}
# TODO - update to check for tracefs fs
echo -n "[+] Checking for ftrace support ..."
mount |grep -q -w debugfs || {
 echo "${name}: debugfs filesystem not mounted? Aborting..."
 exit 2
}
TRCMNT=$(mount |grep -w debugfs |awk '{print $3}')
export TRCMNT=${TRCMNT}/tracing
[ ! -d ${TRCMNT} ] && {
 echo "${name}: ${TRCMNT} not mounted as debugfs? Aborting..."
 exit 2
}
echo " [OK] (ftrace loc: ${TRCMNT})"

which trace-cmd >/dev/null 2>&1 || {
  echo "${name}: trace-cmd not installed (or not in PATH)?"
  exit 1
 }
echo "trace-cmd [OK]"

[ $# -lt 1 ] && {
 echo
 echo "Usage: ${name} program-to-ftrace-via-trace-cmd
 Eg. sudo ./${name} ps -LA
 [NOTE: this will perform an _exclusive_ ftrace of the provided app (ps in this eg)]"
 exit 3
}

TRC_FILE_BINARY=$(basename $1)_trc.dat
#echo "TRC_FILE_BINARY = ${TRC_FILE_BINARY}"
echo "[+] Recording now ...(binary ftrace file is ${TRC_FILE_BINARY})"
trace-cmd record -p function_graph -o "${TRC_FILE_BINARY}" -F "$@" || {
  echo "${name}: 'trace-cmd record' failed, aborting ..."
  exit 4
}
ls ${TRC_FILE_BINARY} >/dev/null || {
  echo "${name}: 'trace-cmd record' failed, no binary trace file, aborting ..."
  exit 5
}

echo "[+] Generating the trace-cmd report now ..."
echo -n "    Note: report done in latency format"
if [ ${DONT_REPORT_IRQCTX} -eq 1 ] ; then
  echo ", *leaving out* interrupt contexts"
  trace-cmd report -i "${TRC_FILE_BINARY}" -I -S -l > ${TRC_FILE}
else
  trace-cmd report -i "${TRC_FILE_BINARY}" -l > ${TRC_FILE}
fi
[ $? -ne 0 ] && {
    echo "${name}: 'trace-cmd report' failed, aborting ..."
    exit 6
}
echo "[+] Done, report: ${TRC_FILE}"
ls -lh ${TRC_FILE}

echo "
NOTE-
The binary data file generated by trace-cmd, here [${TRC_FILE_BINARY}]:
    $(ls -lh ${TRC_FILE_BINARY})
can be imported into the Trace Compass GUI and better visualized.
Details here: using_tracecompass_gui_with_trccmd.txt
(online: )
"

[ 0 -eq 1 ] && {
[ ${WANT_RAW_FMT} -eq 1 ] && {
 # For LTTng TraceCompass GUI: record with -R     << not working w/ tracecompass?? >>
 echo "[+] Reporting now (for TraceCompass with -R (raw fmt);   YMMV, of course) ..."
 if [ ${DONT_REPORT_IRQCTX} -eq 1 ] ; then
  echo "    Note: report done in latency format, *leaving out* interrupt contexts"
  trace-cmd report -i ./trace.dat -R > ${TRC_FILE_RAW}
 else
  trace-cmd report -i ./trace.dat -I -S -l -R > ${TRC_FILE_RAW}
 fi
 [ $? -ne 0 ] && {
   echo "${name}: 'trace-cmd -R (raw) report' failed, aborting ..."
   exit 5
 }
 echo "[+] Done, report: ${TRC_FILE_RAW}"
 ls -lh ${TRC_FILE_RAW}
} || echo "[Skipping (iffy) Trace Compass report file...]"
}

exit 0
